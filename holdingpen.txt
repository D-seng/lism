    <div>
      <draggable
        class="dragArea"
        chosenClass="chosen"
        ghostClass="dropTarget"
        animation="250"
        bubbleScroll="true"
        tag="ul"
        handle=".handle"
        :list="clauses"
        :group="{ name: 'clauses', pull: 'clone', put: false }"
        @change="renumberHandler"
      >
        <li v-for="el in list" :key="el.section">
          <font-awesome-icon
            icon="grip-lines"
            class="fas fa-grip-lines fa-lg handle"
            @drop="addToStackHandler"
          />
          <font-awesome-icon
            icon="edit"
            class="fas fa-edit fa-lg"
            @click="editX(el.section, el.verbiage, el.id)"
          />
          <span class="listSpan"> {{ el.section }}</span>
          <span @click="getArr(el.id)" id="el.id" contenteditable="false">
            {{ el.verbiage }}
          </span>

          <!-- <div v-if="el.subsections.length > 0"> -->
          <NestedDraggable
            :list="el.subsections"
            @renumber-handler="renumberHandler"
            :ce="false"
            @show-editor="editX('subsequent')"
          />
          <!-- </div> -->
        </li>
      </draggable>
    </div>

     :group="{ name: 'lseAndFeeder', pull: 'clone', put: false }"

     cloneHandler(evt) {
      // debugger
      var pos
      var arrSec
      var k
      //RUN A SECTION FINDER, AS ON NESTEDEXAMPLE.VUE.
      console.log('this.feederMaster')
      console.log(this.feederMaster)

      if (this.singleMode) {
        if (this.sectionToClone.indexOf('.') === -1) {
          pos = this.feeder[this.sectionToClone]
        } else {
          k = 0
          arrSec = this.sectionToClone.split('.')
          pos = 'this.feederMaster[' + arrSec[0] + ']'
          for (k = 1; k < arrSec.length; k++) {
            pos = pos + '.subsections[' + (arrSec[k] - 1) + ']'
          }
        }

        // debugger
        console.log(pos)
        var fObj = eval(pos)
        console.log(fObj)

        var newObj = {
          id: fObj.id,
          section: fObj.section,
          verbiage: fObj.verbiage
        }
        if (this.singleMode) {
          newObj.subsections = []
        } else {
          newObj.subsections = fObj.subsections
        }
      }
      console.log(evt.clone)
      evt.clone = newObj
      console.log('evt.clone')
      console.log(evt.clone)
    },


    // collapse(ev) {
    //   // NEED TO PICK OUT WHICH PARTS OF THIS
    //   // ALLOW FOR DRAGGING SINGLE ELEMENT
    //   // SHOULD NEED TO SET vxClone.
    //   this.subjectSection = this.retrieveSubjectSection(ev)

    //   if (this.subjectSection.indexOf('.') === -1) {
    //     this.lev1 = true
    //     var cList = cloneDeep(this.list1)
    //     cList[this.subjectSection * 1].subsections = []
    //     this.alteredList1 = cList
    //     console.log('this.alteredList1')
    //     console.log(this.alteredList1)
    //   } else {
    //     // Refactor alert: Everything in this else block.
    //     var lastIndex = this.subjectSection.lastIndexOf('.')
    //     var secLength = this.subjectSection.length - lastIndex - 1

    //     this.droppedSections =
    //       this.subjectSection.substr(lastIndex + 1, secLength) * 1 - 1
    //     var tList = cloneDeep(this.list1)
    //     this.lastList = cloneDeep(this.list1)
    //     this.repop = true
    //     tList[this.droppedSections].subsections = []
    //     this.alteredList1 = cloneDeep(tList)
    //   }

    //   this.$store.dispatch('storeList', this.alteredList1)
    //   this.renderKey += 1

    //   //Need to put truncated list into an object for cloning.
    //   console.log('this.alteredList1')
    //   console.log(this.alteredList1)
    //   this.$emit('force-renumber')
    // },